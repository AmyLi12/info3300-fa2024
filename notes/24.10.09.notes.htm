<html><head>
<title>INFO 3300 - October 9</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  
  <style>
  
  
  .state {
      fill: lightgrey;
    }
  
  

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for October 9</h3>
  <p>
    If you have a moment, please complete <a href="https://forms.gle/ZG9K9H8WtSv9R3397">this survey</a> to generate a dataset to use in class. Thanks.
  </p>
  <p>
    We have a new import at the top of the file: <a href="https://github.com/topojson/topojson">TopoJSON</a><br/>
    TopoJSON provides a helpful framework for storing, loading, and displaying topographical data. Check out its <a href="https://github.com/topojson/topojson-specification">data specification</a>.
  </p>
  <p>
    More on <a href="https://github.com/d3/d3-geo">d3.geo</a> and its <a href="https://github.com/d3/d3-geo#azimuthal-projections">geographic projections</a>.
  </p>

  <h5>HTML for today:</h5>


  <svg id="choropleth" height="600" width="900" style="background: #445; margin-top:50px" >

  </svg>

  <svg id="colorLegend" height="100" width="600" style="background: #fff; margin-top:30px" >

  </svg>


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">

  const svg = d3.select("#choropleth");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = { top: 20, right: 20, bottom: 20, left:20};
  const mapWidth = width - margin.left - margin.right;
  const mapHeight = height - margin.top - margin.bottom;
  const map = svg.append("g")
                  .attr("transform","translate("+margin.left+","+margin.top+")");
                  
  // 0. Let's explore a new way to use promises for data imports that might be a bit cleaner when importing lots of files
  
  // const testFunc = async function() {
  //   return "hello";  
  //   // because we added async, we have access to new, useful keywords...
  // }
  // console.log(testFunc()); // notice that this now returns a Promise object!
  // console.log("Mango");
  

  // 1. An async function to load data and build the map
  // We use async functions because they give access to *await* which can make code a lot easier to read
  // See docs here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function

  // * Start by making an anonymous async function which will contain most or all of your code *
  // * Make sure to run the function after you make it (see bottom of file) *
  // *** If it seems like nothing is happening, make sure you are running it ***
  // * Then use await instead of .then()  -- see line 110
  const requestData = async function() {

    // 2. Draw a map of US using topoJSON
    // 2a. Import data as synchronous call to topoJSON data file
    // Care of Mike Bostock:
    //   "../datasets/us-smaller.json"
    const us = await d3.json("../datasets/us-smaller.json");
    console.log(us);

    // 2b. Pick out topographic features and build d3 helpers
    var states = topojson.feature(us, us.objects.states);     // List of state outlines to fill
    var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], states);
    var path = d3.geoPath().projection(projection);
    console.log(states);
    
    // We can try a few different projections, including:
    //   .geoOrthographic()  .geoStereographic()   .geoMercator()
    
    
    // 2c. Draw states and outlines (see CSS at the top)
    let statePaths = map.selectAll("path.state").data(states.features)
                    .join("path")
                    .attr("class", "state")
                    .attr("note", d => d.id)  // debugging
                    .attr("d", path)
   
    // 2d. Add a graticule (we did this after 2c, but it must go here)
    //      (Graticules are much more configurable, but we'll use the default for now)
   
  
    // 3a. Import survey data as synchronous calls
    // "../datasets/us-state-names.tsv"
    // "../datasets/state-survey-responses-fa24.csv"
    
    
    
    // 3b. Generate the counts we will need
    
    
  
  
    // 3c. Make a d3 color scale for frequency    
    
    
  
  
    // 3d. Recolor the states to make a choropleth map
    
    
    
  
    // 3e. Use the extra legend code to draw a legend
    // drawLegend("#colorLegend", colorScale);
    
    
  
  
  
    // 4. Add a tooltip that "sticks" below the state
  
  
    // // Stub code to draw the tooltip - we use an SVG element here
    // // You can use an absolute-positioned HTML element, but the positioning requires some more work
    // // Instead, we make something centered at (0,0) and then later use translate() to move it
    // //  (this is why the x position for the rect is -tooltipWidth/2.0  -- so it's centered on 0 )
    // let tooltip = map.append("g")
    //                  .attr("class","tooltip")
    //                  .attr("visibility","hidden");
    // tooltip.append("rect")
    //        .attr("fill", "black")
    //        .attr("opacity", 0.9)
    //        .attr("x", -tooltipWidth / 2.0)
    //        .attr("y", 0)
    //        .attr("width",tooltipWidth)
    //        .attr("height",tooltipHeight)
    // let txt = tooltip.append("text")
    //                  .attr("fill", "white")
    //                  .attr("text-anchor","middle")
    //                  .attr("alignment-baseline","hanging")
    //                  .attr("x", 0)
    //                  .attr("y", 2);
    // let txt2 = tooltip.append("text")
    //                  .attr("fill", "white")
    //                  .attr("text-anchor","middle")
    //                  .attr("alignment-baseline","hanging")
    //                  .attr("x", 0)
    //                  .attr("y", 22);
    
    
    
  
    function mouseEntersPlot() {
    }
  
    function mouseLeavesPlot() {
    }
    
    
    
    
    
    
  // END OF REQUESTDATA()
  }
  requestData();
  
  
  
  </script>
  
  
  <script>
  // Flexible legend-drawing function - Jeff Rzeszotarski, 2024
  //   Released under MIT Free license
  //  Takes in an SVG element selector <legendSelector> and a d3 color scale <legendColorScale>
  //
  // Usage example: drawLegend("#legendID", grossIncomeColorScale)
  function drawLegend(legendSelector, legendColorScale) {
    
    // This code should adapt to a variety of different kinds of color scales
    //  Credit Prof. Rz if you are basing a legend on this structure, and note PERFORMANCE CONSIDERATIONS
    
    // Shrink legend bar by 5 px inwards from sides of SVG
    const offsets = { width: 10,
                      top: 2,
                      bottom: 24 }; 
    // Number of integer 'pixel steps' to draw when showing continuous scales
    //    Warning, not using a canvas element so lots of rect tags will be created for low stepSize, causing issues with performance -- keep this large
    const stepSize = 4; 
    // Extend the minmax by 0% in either direction to expose more features by default
    const minMaxExtendPercent = 0;
      
    
    const legend = d3.select(legendSelector);
    const legendHeight = legend.attr("height");
    const legendBarWidth = legend.attr("width") - (offsets.width * 2);
    const legendMinMax = d3.extent(legendColorScale.domain()); 
                // recover the min and max values from most kinds of numeric scales
    const minMaxExtension = (legendMinMax[1] - legendMinMax[0]) * minMaxExtendPercent;
    const barHeight = legendHeight - offsets.top - offsets.bottom;     
    
    // In this case the "data" are pixels, and we get numbers to use in colorScale
    // Use this to make axis labels
    let barScale = d3.scaleLinear().domain([legendMinMax[0]-minMaxExtension,
                                              legendMinMax[1]+minMaxExtension])
                                    .range([0,legendBarWidth]);
    let barAxis = d3.axisBottom(barScale);
    
    // Place for bar slices to live
    let bar = legend.append("g")
                    .attr("class", "legend colorbar")
                    .attr("transform", `translate(${offsets.width},${offsets.top})`)
    
    // ****** SWITCHES FOR DIFFERENT SCALE TYPES ******
    
    // Check if we're using a binning scale - if so, we make blocks of color
    if (legendColorScale.hasOwnProperty('thresholds') || legendColorScale.hasOwnProperty('quantiles')) {
      // Get the thresholds
      let thresholds = [];
      if (legendColorScale.hasOwnProperty('thresholds')) { thresholds = legendColorScale.thresholds() }
      else { thresholds = legendColorScale.quantiles() }
      
      const barThresholds = [legendMinMax[0], ...thresholds, legendMinMax[1]];
      
      // Use the quantile breakpoints plus the min and max of the scale as tick values
      barAxis.tickValues(barThresholds);
      
      // Draw rectangles between the threshold segments
      for (let i=0; i<barThresholds.length-1; i++) {
        let dataStart = barThresholds[i];
        let dataEnd = barThresholds[i+1];
        let pixelStart = barAxis.scale()(dataStart);
        let pixelEnd = barAxis.scale()(dataEnd);
        
        bar.append("rect")
            .attr("x", pixelStart)
            .attr("y", 0)
            .attr("width", pixelEnd - pixelStart )
            .attr("height", barHeight)
            .style("fill", legendColorScale( (dataStart + dataEnd) / 2.0 ) ); 
      }
    }
    // Else if we have a continuous / roundable scale
    //  In an ideal world you might construct a custom gradient mapped to the scale
    //  For this one, we use a hack of making stepped rects
    else if (legendColorScale.hasOwnProperty('rangeRound')) {
      // NOTE: The barAxis may round min and max values to make them pretty
      // ** This also means there is a risk of the legend going beyond scale bounds
      // We need to use the barAxis min and max just to be sure the bar is complete
      //    Using barAxis.scale().invert() goes from *axis* pixels to data values easily
      // ** We also need to create patches for the scale if the labels exceed bounds
      //     (floating point comparisons risky for small data ranges,but not a big deal
      //      because patches will be indistinguishable from actual scale bottom)
      // It's likely that scale clamping will actually do this for us elegantly
      // ...but better to be safer and patch the regions anyways
      
      for (let i=0; i<legendBarWidth; i=i+stepSize) {
        
        let center = i+(stepSize/2);
        let dataCenter = barAxis.scale().invert( center );
        
        // below normal scale bounds
        if ( dataCenter < legendMinMax[0] ) { 
          bar.append("rect")
              .attr("x", i)
              .attr("y", 0)
              .attr("width", stepSize)
              .attr("height",barHeight)
              .style("fill", legendColorScale( legendMinMax[0] ) ); 
          }
          // within normal scale bounds
          else if ( dataCenter < legendMinMax[1] ) {
            bar.append("rect")
              .attr("x", i)
              .attr("y", 0)
              .attr("width", stepSize)
              .attr("height",barHeight)
              .style("fill", legendColorScale( dataCenter ) ); 
          }
          // above normal scale bounds
          else {
            bar.append("rect")
              .attr("x", i)
              .attr("y", 0)
              .attr("width", stepSize)
              .attr("height",barHeight)
              .style("fill", legendColorScale( legendMinMax[1] ) ); 
          }
        
      }
    }
    // Otherwise we have a nominal scale
    else {
      let nomVals = legendColorScale.domain().sort();
      
      // Use a scaleBand to make blocks of color and simple labels
      let barScale = d3.scaleBand().domain(nomVals)
                                    .range([0,legendBarWidth])
                                    .padding(0.05);
      barAxis.scale(barScale);
      
      // Draw rectangles for each nominal entry
      nomVals.forEach( d => {
        bar.append("rect")
            .attr("x", barScale(d) )
            .attr("y", 0)
            .attr("width", barScale.bandwidth() )
            .attr("height", barHeight)
            .style("fill", legendColorScale( d ) );
      });
    }
    // DONE w/SWITCH
    
    // Finally, draw legend labels
    legend.append("g")
          .attr("class", "legend axis")
          .attr("transform",`translate(${offsets.width},${offsets.top+barHeight+5})`)
          .call(barAxis);
      
    }
    </script>
  
  
  

  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  
  function sanitize(s) {
    return s.replace("<br>", "\\n")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
          }
    document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
    hljs.highlightAll();
  </script>


  </div>
</body>
</html>
